{"version":3,"sources":["store/tickets/types.ts","store/tickets/reducer.ts","store/filters/type.ts","store/filters/reducer.ts","store/index.ts","store/tickets/sagas.ts","store/tickets/actions.ts","store/rootSagas.ts","store.ts","components/Transfers/index.tsx","assets/img/plane.svg","components/Transfers/TransferField.tsx","store/filters/actions.ts","components/Filter/index.tsx","components/Checkbox/index.tsx","components/Loader/index.tsx","components/Button/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["FETCH_TICKETS","INIT_DATA_TICKETS","SHOW_LOADER","HIDE_LOADER","initialState","isLoading","data","reducer","state","action","type","payload","CHECKED_FILTER","CHECKED_ALL_FILTER","RESET_FILTER","id","value","isChecked","checked","checkboxAll","find","filter","result","map","forEach","RootReducer","combineReducers","filters","FiltersReducer","tickets","TicketsReducer","sagaWatcher","sagaWorker","takeEvery","put","delay","call","fetchPosts","a","response","dataJSON","rootSagas","all","composeEnhancers","window","compose","saga","createSagaMiddleware","store","createStore","applyMiddleware","thunk","run","SortType","TransferField","transfers","title","className","src","planeSvg","alt","Transfers","dispatch","useDispatch","sortBy","ASC","useState","ticketsList","setTicketsList","filterList","setFilterList","useSelector","useEffect","filterTickets","length","undefined","sortFilter","ticket","typeSort","sort","b","changeFilter","checkedAllFilter","checkedFilter","resetFilters","disabled","Loader","Filter","clickButton","Checkbox","onClick","e","toString","name","htmlFor","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"y7BAAaA,EAAgB,gBAChBC,EAAoB,oBACpBC,EAAc,cACdC,EAAc,cCDrBC,EAA6B,CAC/BC,WAAW,EACXC,KAAM,IAkBKC,EAhBC,WAGV,IAFFC,EAEC,uDAFqBJ,EACtBK,EACC,uCACD,OAAQA,EAAOC,MACX,KAAKT,EACD,OAAO,2BAAIO,GAAX,IAAkBF,KAAK,YAAKG,EAAOE,WACvC,KAAKT,EACD,OAAO,2BAAIM,GAAX,IAAkBH,WAAW,IACjC,KAAKF,EACD,OAAO,2BAAIK,GAAX,IAAkBH,WAAW,IACjC,QACI,OAAOG,IClBNI,EAAiB,iBACjBC,EAAqB,qBACrBC,EAAe,eCAtBV,EAA0B,CAC5B,CACIW,IAAK,EACLC,MAAO,MACPC,WAAW,GAEf,CACIF,GAAI,EACJC,MAAO,eACPC,WAAW,GACZ,CACCF,GAAI,EACJC,MAAO,aACPC,WAAW,GACZ,CACCF,GAAI,EACJC,MAAO,cACPC,WAAW,GACZ,CACCF,GAAI,EACJC,MAAO,cACPC,WAAW,IAwCJV,EArCC,WAGV,IAFFC,EAEC,uDAFkBJ,EACnBK,EACC,uCACGS,GAAU,EACd,OAAQT,EAAOC,MACX,KAAKE,EACD,IAAIO,EAAcX,EAAMY,MAAK,SAAAC,GAAM,OAAmB,IAAfA,EAAON,MAC1CO,EAASd,EAAMe,KAAI,SAAAF,GAKnB,OAJIA,EAAON,KAAON,EAAOE,UACrBU,EAAOJ,WAAaI,EAAOJ,WAC3BI,EAAOJ,YAA4B,IAAfI,EAAON,KAC3BG,GAAU,GACPG,KAIX,OAFGF,IACCA,EAAYF,UAAYC,GACrBI,EACX,KAAKT,EAKD,OAJAL,EAAMgB,SAAQ,SAACH,GACRA,EAAON,KAAON,EAAOE,UACpBO,GAAWG,EAAOJ,cAEnBT,EAAMe,KAAI,SAAAF,GAEb,OADAA,EAAOJ,UAAYC,EACZG,KAEf,KAAKP,EACD,OAAON,EAAMe,KAAI,SAAAF,GAEb,OADAA,EAAOJ,WAAY,EACZI,KAEf,QACI,OAAOb,ICrDJiB,EAFMC,YAAgB,CAACC,QAASC,EAAgBC,QAASC,I,mECCvDC,G,WAIPC,GAJH,SAAUD,IAAV,iEACH,OADG,SACGE,YAAUjC,EAAegC,GAD5B,uCAIP,SAAUA,IAAV,uEAEQ,OAFR,kBAEcE,YCGH,CACHxB,KAAMR,IDNd,OAGQ,OAHR,SAGciC,YAAM,MAHpB,OAIwB,OAJxB,SAI8BC,YAAKC,GAJnC,OAKQ,OADM1B,EAJd,iBAKcuB,YAAI,CAACxB,KAAMT,EAAmBU,YAL5C,QAMQ,OANR,UAMcuB,YCKH,CACHxB,KAAMP,IDZd,gH,SAWekC,I,2EAAf,4BAAAC,EAAA,6DAEUC,EAAWC,EAFrB,kBAGWD,EAASV,SAHpB,4C,qCEjByBY,GAAV,SAAUA,IAAV,iEACX,OADW,SACLC,YAAI,CACNX,MAFO,uCCOf,IAAMY,EAAmBC,OAAM,sCAA8DC,IAGvFC,EAAOC,cAGPC,EAA8EC,YAChFxB,EACA,GACAkB,EACIO,YACIC,IACAL,KAKZA,EAAKM,IAAIX,GACMO,IChBVK,EDgBUL,I,gBE5BA,MAA0B,kCC2B1BM,EArBO,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,UACdC,EAAsB,IAAdD,EAAkB,WAAa,YAC7C,OACI,sBAAKE,UAAU,0BAAf,UACKF,EAAa,EACT,kCAAKA,EAAL,IAAiBC,KAEjB,4CAEL,sBAAKC,UAAU,uBAAf,UACI,yBACA,qBACIA,UAAU,aACVC,IAAKC,EACLC,IAAI,yB,gBFRnBP,O,aAAAA,I,gBAAAA,M,KAML,IA0FeQ,EA1FG,SAAC,GAAe,eAC9B,IAAMC,EAAWC,cACXC,EAAmBX,EAASY,IAFL,EAGSC,mBAAoB,IAH7B,mBAGtBC,EAHsB,KAGTC,EAHS,OAIOF,mBAAoB,IAJ3B,mBAItBG,EAJsB,KAIVC,EAJU,OAQgBC,aAAY,qBAAE1C,WAFvDxB,EANyB,EAMzBA,UACMwB,EAPmB,EAOzBvB,KAEEqB,EAAqB4C,aAAY,qBAAE5C,WAEzC6C,qBAAU,WACNV,EHpBwB,CAC5BpD,KAAMV,MGoBH,IAEHwE,qBAAU,WACNC,MACD,CAAC5C,IAEJ2C,qBAAU,WACNF,EAAc3C,GACd8C,MACD,CAAC9C,IAEJ,IAAM8C,EAAgB,SAAC1D,GACnB,GAAIc,GAAWA,EAAQ6C,OAAS,GAAKL,EACjC,QAAWM,IAAP5D,EAAkB,CAClB,IAAMO,EAASsD,EAAW/C,EAASmC,GACnCI,EAAe9C,EAAOD,QAAO,SAACwD,GAC1B,IAAMxD,EAA8BgD,EAAWjD,MAAK,SAAAC,GAAM,OAAIwD,EAAOtB,YAAclC,EAAON,MAC1F,QAAOM,GAASA,EAAOJ,mBAG3BmD,EAAevC,EAAQR,QAAO,SAACwD,GAAY,IAAD,EACtC,iBAAOA,EAAOtB,YAAcxC,SAA5B,cAMV6D,EAAa,SAACtE,EAAiBwE,GAAlB,OACfxE,EAAKyE,MAAK,SAACzC,EAAG0C,GACV,OAAIF,EACOxC,EAAEiB,UAAYyB,EAAEzB,UAAY,EAAKyB,EAAEzB,UAAYjB,EAAEiB,WAAc,EAAI,EAEnEjB,EAAEiB,UAAYyB,EAAEzB,UAAY,EAAKyB,EAAEzB,UAAYjB,EAAEiB,WAAc,EAAI,MAUhF0B,EAAe,SAAClE,GAEd+C,GADQ,IAAR/C,EGnEoB,SAACA,GAAD,MAAgB,CAC5CL,KAAMG,EACNF,QAASI,GHkEQmE,CAAiBnE,GGzET,SAACA,GAAD,MAAgB,CACzCL,KAAME,EACND,QAASI,GHyEQoE,CAAcpE,KAE/B,OACI,qBAAK0C,UAAU,YAAf,SACI,sBAAKA,UAAU,qBAAf,UACI,cAAC,EAAD,CAAQ2B,aAfC,SAACrE,GAClB+C,EGvD0B,CAC9BpD,KAAMI,SHuDS6D,IAAP5D,GACAkE,EAAalE,IAY2BsE,SAAUhF,EAAW4E,aAAcA,EAC/DtD,QAAS0C,IACjB,qBAAKZ,UAAU,kBAAf,SACKpD,EACI,qBAAKoD,UAAU,0BAAf,SAAyC,cAAC6B,EAAD,MAE1C,mCAEwB,OAAhBnB,GAAwBA,EAAYO,OAAS,EACxCP,EAAY5C,KAAI,SAACsD,GACd,OACI,cAAC,EAAD,CAA+BtB,UAAWsB,EAAOtB,WAA7BsB,EAAO9D,OAKlC,qBAAK0C,UAAU,0BAAf,SAAyC,uDIjE/D8B,G,MAtBA,SAAC,GAA4D,IAA3D5D,EAA0D,EAA1DA,QAASsD,EAAiD,EAAjDA,aAAcI,EAAmC,EAAnCA,SAAUD,EAAyB,EAAzBA,aAC9C,OACI,sBAAK3B,UAAU,oBAAf,UACI,qDACA,qBAAKA,UAAU,yBAAf,SACK9B,EAAQ+C,OAAS,EACb/C,EAAQJ,KAAI,SAACF,GACV,OACI,gCACI,cAAC,EAAD,aAAUgE,SAAUA,EAAUJ,aAAcA,GAAkB5D,KAC9C,IAAfA,EAAON,GAAa,cAAC,EAAD,CAAwByC,MAAM,OAAOgC,YAAaJ,EAAcC,SAAUA,EAAUrE,MAAOK,EAAON,IAArFM,EAAON,IAAsF,+BAFzHM,EAAON,OAOxB,kDCPN0E,G,MATE,SAAC,GAAmE,IAAlE1E,EAAiE,EAAjEA,GAAIC,EAA6D,EAA7DA,MAAOC,EAAsD,EAAtDA,UAAWgE,EAA2C,EAA3CA,aAA2C,IAA7BI,gBAA6B,SAChF,OACI,sBAAK5B,UAAS,UAAK4B,EAAW,WAAa,IAA3C,UACI,uBAAO3E,KAAK,WAAoB2E,SAAUA,EAAUK,QAAS,SAACC,GAAD,OAAMV,EAAalE,IAAK0C,UAAU,WAAWvC,QAASD,EAAWF,GAAIA,EAAG6E,WAAYC,KAAM7E,EAAOA,MAAOA,GAAzID,GAC5B,uBAAO+E,QAAS/E,EAAG6E,WAAnB,SAAgC5E,SCd7B,oBAAO,qBAAKyC,UAAU,mBCetBgC,G,MANE,SAAC,GAA0D,IAAzDjC,EAAwD,EAAxDA,MAAOxC,EAAiD,EAAjDA,MAAOwE,EAA0C,EAA1CA,YAA0C,IAA7BH,gBAA6B,SACvE,OACI,wBAAS5B,UAAS,UAAK4B,EAAW,WAAa,IAAMA,SAAUA,EAAUK,QAAS,SAACC,GAAD,OAAMH,EAAYxE,IAApG,SAA6GwC,MCItGuC,MAVf,WACI,OACI,cAAC,IAAD,CAAU/C,MAAOA,EAAjB,SACI,qBAAKS,UAAU,MAAf,SACI,cAAC,EAAD,SCKDuC,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,O","file":"static/js/main.cf76978c.chunk.js","sourcesContent":["export const FETCH_TICKETS = 'FETCH_TICKETS'\r\nexport const INIT_DATA_TICKETS = 'INIT_DATA_TICKETS'\r\nexport const SHOW_LOADER = 'SHOW_LOADER'\r\nexport const HIDE_LOADER = 'HIDE_LOADER'\r\n\r\nexport interface ITicket {\r\n    id: string;\r\n    transfers: number;\r\n}\r\n\r\nexport interface TicketsState {\r\n    isLoading: boolean,\r\n    data: ITicket[]\r\n}\r\n\r\ninterface InitTickets {\r\n    type: typeof INIT_DATA_TICKETS\r\n    payload: ITicket[]\r\n}\r\ninterface ShowLoader {\r\n    type: typeof SHOW_LOADER\r\n}\r\ninterface HideLoader {\r\n    type: typeof HIDE_LOADER\r\n}\r\n\r\nexport type TicketsActionTypes = InitTickets | HideLoader | ShowLoader\r\n","import {HIDE_LOADER, INIT_DATA_TICKETS, SHOW_LOADER, TicketsActionTypes, TicketsState} from \"./types\";\r\n\r\nconst initialState: TicketsState = {\r\n    isLoading: true,\r\n    data: []\r\n}\r\nconst reducer = (\r\n    state: TicketsState = initialState,\r\n    action: TicketsActionTypes\r\n) => {\r\n    switch (action.type) {\r\n        case INIT_DATA_TICKETS :\r\n            return {...state, data: [...action.payload]}\r\n        case SHOW_LOADER :\r\n            return {...state, isLoading: true}\r\n        case HIDE_LOADER :\r\n            return {...state, isLoading: false}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;\r\n","export const CHECKED_FILTER = 'CHECKED_FILTER'\r\nexport const CHECKED_ALL_FILTER = 'CHECKED_ALL_FILTER'\r\nexport const RESET_FILTER = 'RESET_FILTER'\r\n\r\nexport interface IFilter {\r\n    id: number;\r\n    value: string;\r\n    isChecked: boolean\r\n}\r\n\r\nexport interface FiltersState {\r\n    filters: IFilter[]\r\n}\r\n\r\ninterface ChangeFilters {\r\n    type: typeof CHECKED_FILTER\r\n    payload: number\r\n}\r\n\r\ninterface checkedAllFilter {\r\n    type: typeof CHECKED_ALL_FILTER\r\n    payload: number\r\n}\r\n\r\ninterface resetFilter {\r\n    type: typeof RESET_FILTER\r\n}\r\n\r\nexport type FiltersActionTypes = ChangeFilters | checkedAllFilter | resetFilter\r\n","import {CHECKED_ALL_FILTER, CHECKED_FILTER, FiltersActionTypes, IFilter, RESET_FILTER} from \"./type\";\r\n\r\nconst initialState: IFilter[] = [\r\n    {\r\n        id: -1,\r\n        value: \"All\",\r\n        isChecked: false\r\n    },\r\n    {\r\n        id: 0,\r\n        value: \"No transfers\",\r\n        isChecked: false\r\n    }, {\r\n        id: 1,\r\n        value: \"1 Transfer\",\r\n        isChecked: true\r\n    }, {\r\n        id: 2,\r\n        value: \"2 Transfers\",\r\n        isChecked: false\r\n    }, {\r\n        id: 3,\r\n        value: \"3 Transfers\",\r\n        isChecked: false\r\n    },\r\n]\r\nconst reducer = (\r\n    state: IFilter[] = initialState,\r\n    action: FiltersActionTypes\r\n) => {\r\n    let checked = true\r\n    switch (action.type) {\r\n        case CHECKED_FILTER :\r\n            let checkboxAll = state.find(filter => filter.id === -1)\r\n            let result = state.map(filter => {\r\n                if (filter.id === action.payload)\r\n                    filter.isChecked = !filter.isChecked;\r\n                if(!filter.isChecked && filter.id !== -1)\r\n                    checked = false\r\n                return filter;\r\n            })\r\n            if(checkboxAll)\r\n                checkboxAll.isChecked = checked\r\n            return result\r\n        case CHECKED_ALL_FILTER :\r\n            state.forEach((filter) => {\r\n                if(filter.id === action.payload)\r\n                    checked = !filter.isChecked\r\n            })\r\n            return state.map(filter => {\r\n                filter.isChecked = checked;\r\n                return filter;\r\n            })\r\n        case RESET_FILTER :\r\n            return state.map(filter => {\r\n                filter.isChecked = false;\r\n                return filter;\r\n            })\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;\r\n","import {combineReducers} from 'redux';\r\nimport TicketsReducer from \"./tickets/reducer\";\r\nimport FiltersReducer from \"./filters/reducer\";\r\n\r\nconst RootReducer  = combineReducers({filters: FiltersReducer, tickets: TicketsReducer});\r\n\r\nexport default RootReducer\r\n","import {takeEvery, put, call, delay} from 'redux-saga/effects'\r\nimport {FETCH_TICKETS, INIT_DATA_TICKETS} from \"./types\";\r\nimport dataJSON from \"../../data.json\"\r\nimport {hideLoader, showLoader} from \"./actions\";\r\n\r\nexport function* sagaWatcher() {\r\n    yield takeEvery(FETCH_TICKETS, sagaWorker)\r\n}\r\n\r\nfunction* sagaWorker() {\r\n    try {\r\n        yield put(showLoader())\r\n        yield delay(1300)\r\n        const payload = yield call(fetchPosts)\r\n        yield put({type: INIT_DATA_TICKETS, payload})\r\n        yield put(hideLoader())\r\n    } catch (e) {\r\n    }\r\n}\r\n\r\nasync function fetchPosts() {\r\n    // const response = await axios.get('')\r\n    const response = dataJSON\r\n    return response.tickets\r\n}\r\n","import {FETCH_TICKETS, HIDE_LOADER, SHOW_LOADER} from \"./types\";\r\n/*type ThunkResult<R> = ThunkAction<R, TicketsState, undefined, TicketsActionTypes>;\r\nexport const fetchData = (): ThunkResult<Promise<void>> => {\r\n    return async (dispatch) => {\r\n        // const response = await axios.get('..')\r\n        setTimeout(() => {\r\n            dispatch({type: FETCH_TICKETS, payload:dataJSON.tickets})\r\n        }, 1500)\r\n    }\r\n};*/\r\nexport const fetchData = () => ({\r\n    type: FETCH_TICKETS,\r\n});\r\nexport const showLoader = () => {\r\n    return {\r\n        type: SHOW_LOADER\r\n    }\r\n}\r\n\r\nexport const hideLoader = () => {\r\n    return {\r\n        type: HIDE_LOADER\r\n    }\r\n}\r\n","import {all} from 'redux-saga/effects'\r\nimport {sagaWatcher} from \"./tickets/sagas\";\r\n\r\nexport default function* rootSagas() {\r\n    yield all([\r\n        sagaWatcher()\r\n    ])\r\n}\r\n","import {createStore, compose, applyMiddleware, Store, CombinedState} from 'redux';\r\nimport RootReducer from \"./store/index\";\r\nimport thunk from \"redux-thunk\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport rootSagas from \"./store/rootSagas\";\r\nimport {IFilter} from \"./store/filters/type\";\r\nimport {TicketsState} from \"./store/tickets/types\";\r\n/* eslint-disable no-underscore-dangle */\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window['__REDUX_DEVTOOLS_EXTENSION_COMPOSE__'] as typeof compose || compose;\r\n/* eslint-enable */\r\n\r\nconst saga = createSagaMiddleware()\r\n\r\n\r\nconst store: Store<CombinedState<{ filters: IFilter[]; tickets: TicketsState; }>> = createStore(\r\n    RootReducer,\r\n    {},\r\n    composeEnhancers(\r\n        applyMiddleware(\r\n            thunk,\r\n            saga,\r\n        )\r\n    )\r\n);\r\n\r\nsaga.run(rootSagas)\r\nexport default store\r\n","import {useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport TransferField from \"./TransferField\";\r\nimport {Filter, Loader} from \"../index\";\r\n\r\nimport {fetchData} from \"../../store/tickets/actions\";\r\nimport {ITicket, TicketsState} from \"../../store/tickets/types\";\r\nimport {checkedAllFilter, checkedFilter, resetFilter} from \"../../store/filters/actions\";\r\nimport {IFilter} from \"../../store/filters/type\";\r\n\r\nimport \"./Transfers.scss\";\r\n\r\nenum SortType {\r\n    ASC = 1,\r\n    DESC = 0\r\n}\r\n\r\ntype Props = {};\r\nconst Transfers = ({}: Props) => {\r\n    const dispatch = useDispatch()\r\n    const sortBy: SortType = SortType.ASC;\r\n    const [ticketsList, setTicketsList] = useState<ITicket[]>([]);\r\n    const [filterList, setFilterList] = useState<IFilter[]>([]);\r\n    const {\r\n        isLoading,\r\n        data: tickets\r\n    }: { isLoading: boolean, data: ITicket[] } = useSelector(({tickets}: { tickets: TicketsState }) => tickets);\r\n    const filters: IFilter[] = useSelector(({filters}: { filters: IFilter[] }) => filters);\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchData())\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        filterTickets()\r\n    }, [tickets])\r\n\r\n    useEffect(() => {\r\n        setFilterList(filters)\r\n        filterTickets()\r\n    }, [filters])\r\n\r\n    const filterTickets = (id?: number): void => {\r\n        if (tickets && tickets.length > 0 && filterList) {\r\n            if (id === undefined) {\r\n                const result = sortFilter(tickets, sortBy)\r\n                setTicketsList(result.filter((ticket) => {\r\n                    const filter: IFilter | undefined = filterList.find(filter => ticket.transfers === filter.id)\r\n                    return filter ? filter.isChecked : false\r\n                }))\r\n            } else {\r\n                setTicketsList(tickets.filter((ticket) => {\r\n                    return ticket.transfers === id ?? false\r\n                }))\r\n            }\r\n        }\r\n    }\r\n\r\n    const sortFilter = (data: ITicket[], typeSort: SortType): ITicket[] =>\r\n        data.sort((a, b) => {\r\n            if (typeSort)\r\n                return a.transfers > b.transfers ? 1 : (b.transfers > a.transfers) ? -1 : 0\r\n            else\r\n                return a.transfers < b.transfers ? 1 : (b.transfers < a.transfers) ? -1 : 0\r\n\r\n        })\r\n\r\n    const resetFilters = (id?: number): void => {\r\n        dispatch(resetFilter())\r\n        if (id !== undefined)\r\n            changeFilter(id)\r\n    }\r\n\r\n    const changeFilter = (id: number): void => {\r\n        if (id === -1)\r\n            dispatch(checkedAllFilter(id))\r\n        else\r\n            dispatch(checkedFilter(id))\r\n    }\r\n    return (\r\n        <div className=\"transfers\">\r\n            <div className=\"transfers__content\">\r\n                <Filter resetFilters={resetFilters} disabled={isLoading} changeFilter={changeFilter}\r\n                        filters={filterList}/>\r\n                <div className=\"transfers__list\">\r\n                    {isLoading ?\r\n                        (<div className=\"transfers__list-content\"><Loader/></div>)\r\n                        :\r\n                        <>\r\n                            {\r\n                                ticketsList !== null && ticketsList.length > 0 ?\r\n                                    (ticketsList.map((ticket) => {\r\n                                        return (\r\n                                            <TransferField key={ticket.id} transfers={ticket.transfers}\r\n                                            />\r\n                                        )\r\n                                    }))\r\n                                    :\r\n                                    (<div className=\"transfers__list-content\"><p>Empty list</p></div>)\r\n                            }\r\n                        </>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Transfers\r\n","export default __webpack_public_path__ + \"static/media/plane.e4fe2c92.svg\";","import * as React from 'react';\r\nimport planeSvg from \"../../assets/img/plane.svg\";\r\n\r\ntype Props = {\r\n    transfers:number\r\n};\r\nconst TransferField = ({transfers}: Props) => {\r\n    const title = transfers === 1 ? \"Transfer\" : \"Transfers\"\r\n    return (\r\n        <div className=\"transfers__list-content\">\r\n            {transfers  > 0 ?\r\n                (<p> {transfers} {title}</p>)\r\n            :\r\n                (<p>No transfer</p>)\r\n            }\r\n            <div className=\"transfers__list-line\">\r\n                <span/>\r\n                <img\r\n                    className=\"icon-plane\"\r\n                    src={planeSvg}\r\n                    alt=\"No plane icon\"\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TransferField\r\n","import {CHECKED_ALL_FILTER, CHECKED_FILTER, RESET_FILTER} from \"./type\";\r\n\r\nexport const checkedFilter = (id:number) => ({\r\n    type: CHECKED_FILTER,\r\n    payload: id\r\n});\r\n\r\nexport const checkedAllFilter = (id:number) => ({\r\n    type: CHECKED_ALL_FILTER,\r\n    payload: id\r\n});\r\n\r\n\r\nexport const resetFilter = () => ({\r\n    type: RESET_FILTER,\r\n});\r\n","import * as React from 'react';\r\nimport \"./Filter.scss\";\r\nimport {Button, Checkbox} from \"../index\";\r\nimport {IFilter} from \"../../store/filters/type\";\r\n\r\ntype Props = {\r\n    filters: IFilter[],\r\n    disabled: boolean,\r\n    changeFilter: (id: number) => void,\r\n    resetFilters: (id?: number) => void\r\n};\r\nconst Filter = ({filters, changeFilter, disabled, resetFilters}: Props) => {\r\n    return (\r\n        <div className=\"transfers__filter\">\r\n            <h2>Number of transfers</h2>\r\n            <div className=\"transfers__filter-list\">\r\n                {filters.length > 0 ?\r\n                    (filters.map((filter) => {\r\n                        return (\r\n                            <div key={filter.id}>\r\n                                <Checkbox disabled={disabled} changeFilter={changeFilter} {...filter}/>\r\n                                {filter.id !== -1 ? (<Button key={filter.id} title=\"Only\" clickButton={resetFilters} disabled={disabled} value={filter.id}/>):(<></>)}\r\n                            </div>\r\n                        )\r\n                    }))\r\n                    :\r\n                    (<p>Empty list</p>)\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Filter\r\n","import * as React from 'react';\r\nimport \"./Checkbox.scss\"\r\n\r\ntype Props = {\r\n    id:number;\r\n    value:string;\r\n    isChecked: boolean;\r\n    changeFilter: (id:number) => void;\r\n    disabled:boolean,\r\n};\r\nconst Checkbox = ({id, value, isChecked, changeFilter, disabled = false}: Props) => {\r\n    return (\r\n        <div className={`${disabled ? \"disabled\" : \"\"}`}>\r\n            <input type=\"checkbox\" key={id} disabled={disabled} onClick={(e)=> changeFilter(id)} className=\"checkbox\" checked={isChecked} id={id.toString()} name={value} value={value}/>\r\n            <label htmlFor={id.toString()}>{value}</label>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Checkbox\r\n","export default () => (<div className=\"lds-dual-ring\"/>)\r\n","import * as React from 'react';\r\nimport \"./Button.scss\"\r\n\r\ntype Props = {\r\n    title: string;\r\n    value:number;\r\n    clickButton: (id:number) => void;\r\n    disabled:boolean,\r\n};\r\nconst Checkbox = ({title, value, clickButton, disabled = false}: Props) => {\r\n    return (\r\n        <button  className={`${disabled ? \"disabled\" : \"\"}`} disabled={disabled} onClick={(e)=> clickButton(value)}>{title}</button>\r\n    );\r\n};\r\n\r\nexport default Checkbox\r\n","import React from 'react';\r\nimport {Provider} from \"react-redux\";\r\nimport store from \"./store\";\r\nimport {Transfers} from \"./components\";\r\n\r\nfunction App() {\r\n    return (\r\n        <Provider store={store}>\r\n            <div className=\"App\">\r\n                <Transfers/>\r\n            </div>\r\n        </Provider>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nimport \"./styles/index.scss\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}